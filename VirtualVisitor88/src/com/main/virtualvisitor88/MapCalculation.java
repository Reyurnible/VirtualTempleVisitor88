package com.main.virtualvisitor88;import java.io.IOException;import java.io.InputStream;import com.main.virtualvisitor88.Temples.Temple;import android.annotation.TargetApi;import android.content.Context;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.Point;import android.os.Build;import android.util.Log;@TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)public class MapCalculation {	static final int imageWidth=7425;	static final int imageHeight=5695;	static final Double mapScale = 1.0;		static Point getCentetPoint(Temple temple1,Temple temple2,Double wc){		Double dis = temple2.distance-temple1.distance;		Double percentage = (wc-temple1.distance)/dis; 		int x =(int)((temple2.point.x-temple1.point.x)*percentage)+temple1.point.x;		int y =(int)((temple2.point.y-temple1.point.y)*percentage)+temple1.point.y;		Log.d("center point","x:"+x+"y:"+y);		return new Point(x,y);	}		static Point getCharacterPoint(Point center,int width,int height){		width = (int) (width*mapScale);		height = (int)(height*mapScale);			    int imageCenterX=0,imageCenterY=0;	    //X座標の基準値	    imageCenterX=center.x-width/2;	    if((center.x-width/2)<0){	    	imageCenterX=0;	    }else if((center.x+width/2)>=imageWidth){	    	imageCenterX=imageWidth-width;	    }	    //Y座標の基準値	    imageCenterY=center.y-height/2;	    if((center.y-height/2)<0){	    	imageCenterY=0;	    }else if((center.y+height/2)>=imageHeight){	    	imageCenterY=imageHeight-height;	    }	    return new Point(imageCenterX,imageCenterY);	}		static Bitmap getMapBitmap(Point center,int width,int height,Context context){		Log.d("display size","width:"+width+"height:"+height);		InputStream inputStream = null;		try {			width = (int) (width*mapScale);			height = (int)(height*mapScale);					    inputStream = context.getResources().openRawResource(R.drawable.map3);		    Bitmap bmp = BitmapFactory.decodeStream(inputStream);		    inputStream.close();		    Matrix matrix = new Matrix();		    float scale = Math.min((float)200/400, (float)200/400);		    matrix.postScale(scale, scale);		    Bitmap bitmap = Bitmap.createBitmap(bmp,center.x,center.y, width, height,matrix, true);		    bmp.recycle();		    bmp=null;		    return bitmap;		} catch (IOException e) {		} finally {		    if (inputStream != null) {		        try {		            inputStream.close();		        } catch (IOException e) {		        }		    }		}		return null;			}	}