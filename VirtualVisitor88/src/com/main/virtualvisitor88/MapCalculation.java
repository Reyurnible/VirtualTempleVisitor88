package com.main.virtualvisitor88;import java.io.IOException;import java.io.InputStream;import com.main.virtualvisitor88.Temples.Temple;import android.annotation.TargetApi;import android.content.Context;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.BitmapRegionDecoder;import android.graphics.Point;import android.graphics.Rect;import android.os.Build;@TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)public class MapCalculation {	static Point getCentetPoint(Temple temple1,Temple temple2,Double wc){		Double dis = Temples.getDistance(temple1, temple2);		Double percentage = (wc-temple1.distance)/dis; 		int x =(int)((temple2.point.x-temple1.point.x)*percentage);		int y =(int)((temple2.point.y-temple1.point.y)*percentage);		return new Point(x,y);	}		static Bitmap getMapBitmap(Point center,int width,int height,Context context){		InputStream inputStream = null;		int imageWidth=7425;		int imageHeight=5695;				try {			Resources resources = context.getResources();		    BitmapFactory.Options options = new BitmapFactory.Options();		    inputStream = resources.openRawResource(R.drawable.map);		    BitmapRegionDecoder decoder = BitmapRegionDecoder.newInstance(inputStream, true);		    options.inJustDecodeBounds = false;		    int leftTopX=0,leftTopY=0;		    //X座標の基準値		    if((center.x-width/2)<0){		    	leftTopX=0;		    }else if((center.x+width/2)>=imageWidth){		    	leftTopX=imageWidth-width;		    }		    //Y座標の基準値		    if((center.y-height/2)<0){		    	leftTopY=0;		    }else if((center.y+height/2)>=imageHeight){		    	leftTopY=imageHeight-height;		    }		    Rect rect = new Rect(leftTopX,leftTopY,width,height);		    Bitmap bitmap = decoder.decodeRegion(rect, options);		    return bitmap;		} catch (IOException e) {		} finally {		    if (inputStream != null) {		        try {		            inputStream.close();		        } catch (IOException e) {		        }		    }		}		return null;			}	}